import de.gesellix.gradle.docker.tasks.DockerCleanupTask
import de.gesellix.gradle.docker.tasks.DockerInfoTask
import de.gesellix.gradle.docker.tasks.DockerPingTask
import de.gesellix.gradle.docker.tasks.DockerVersionTask

import static groovy.json.JsonOutput.prettyPrint
import static groovy.json.JsonOutput.toJson

buildscript {
  repositories {
    mavenLocal()
    jcenter()
    gradlePluginPortal()
  }

  dependencies {
    classpath "de.gesellix:docker-client:2019-04-03T08-39-45"
//    classpath "de.gesellix:gradle-docker-plugin:local"
  }
}

// works with Gradle 2.1+, for the old configuration see http://plugins.gradle.org/plugin/de.gesellix.docker
plugins {
  id "com.github.ben-manes.versions" version "0.21.0"
  id "de.gesellix.docker" version "2019-04-03T10-56-27"
}

allprojects {
  apply plugin: "base"
  apply plugin: "de.gesellix.docker"

  docker {
//    dockerHost = System.env.DOCKER_HOST ?: "unix:///var/run/docker.sock"
//    dockerHost = System.env.DOCKER_HOST ?: "https://192.168.99.100:2376"
//    certPath = System.getProperty("docker.cert.path") ?: "${System.getProperty("user.home")}/.docker/machine/machines/default"
    authConfigPlain = ["username"     : "gesellix",
                       "password"     : "-yet-another-password-",
                       "email"        : "tobias@gesellix.de",
                       "serveraddress": "https://index.docker.io/v1/"]
  }
}

task ping(type: DockerPingTask) {
  doLast {
    println prettyPrint(toJson(result.content))
  }
}

task dockerInfo(type: DockerInfoTask) {
  doLast {
    println prettyPrint(toJson(info))
  }
}

task dockerVersion(type: DockerVersionTask) {
  doLast {
    println prettyPrint(toJson(version))
  }
}

task cleanupStorage(type: DockerCleanupTask) {
  shouldKeepContainer = { container ->
    logger.warn("container : ${container}")
//    container.Names.any { String name ->
//      name.replaceAll("^/", "").matches(".*data.*")
//    }
    true
  }
  shouldKeepVolume = { Map volume ->
    logger.warn("volume : ${volume}")
//    def keep = volume.Name.replaceAll("^/", "").matches(".*data.*")
//    if (keep) {
//      logger.warn("will keep ${volume}")
//    }
//    return keep
    true
  }
}

wrapper {
  gradleVersion = "5.3.1"
  distributionType = Wrapper.DistributionType.ALL
}
